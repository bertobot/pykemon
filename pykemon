#!/usr/bin/env python

import random
import sys

"""
Dice is a dice object
"""
class Dice(object):
    def __init__(self, size=6):
        self.size = size

    def roll(self):
        return int(self.size * random.random())

    def getSize(self):
        return self.size

    def percent(self):
        return (self.size * random.random()) / self.size

"""
Monster is the base class of a "monster"
"""
class Monster(object):
    def __init__(self, **kwargs):
        self.name = kwargs.get('name')
        self.max_health = kwargs.get('max_health')
        self.health = self.max_health
        self.exp = kwargs.get('exp')
        self.attack = kwargs.get('attack')
        self.defense = kwargs.get('defense')
        self.speed = kwargs.get('speed')
        self.luck = kwargs.get('luck')
        self.level = kwargs.get('level')

    def alive(self):
        return self.health > 0

"""
MonsterGenerator is a factory-type pattern object that generates monsters with
random attributes based on level
"""
class MonsterGenerator(object):
    def generate(self, name, level, dice):
        return Monster( name=name,
                        max_health=level + (level * dice.percent()),
                        attack=level + (level * dice.percent()),
                        defense=level + (level * dice.percent()),
                        speed=level + (level * dice.percent()),
                        luck=level + (level * dice.percent()),
                        level=level) 

"""
Referee is the entity that is responsible 
"""
class Referee(object):
    def __init__(self, dice):
        self.dice = dice

    def attack(self, m1, m2):
        damage = m1.attack * int(self.dice.percent() + 1) 

        # attacker roll for crit
        if self.dice.roll() >= self.dice.getSize():
            damage = m1.attack * 2

        # dodge chance
        if self.dice.roll() >= self.dice.getSize():
            print "{} dodged {} 's attack!".format(m2.name, m1.name )

        else:
            m2.health -= damage - m2.defense
            print "{} dealt {} {} damage".format(m1.name, m2.name, damage)

        if m2.health <= 0:
            print "{} has collapsed.".format(m2.name)
            return True

        return False

    def vsPlayer(self, player, monster): 
        
        for m1 in player.monsters:
            if not m1.alive(): continue

            print "{} joins the battle!".format(m1.name)

            while True:
                if self.attack(m1, monster):
                    print "{} wins the match!".format(m1.name)
                    # TODO: option to capture monster here
                    break

                elif self.attack(monster, m1):
                    print "{} wins the match!".format(monster.name)
                    break

    
class Area(object):
    def __init__(self, **kwargs):
        self.name = kwargs.get('name', 'The Random Zone')
        self.level_min = kwargs.get('level_min')
        self.level_max = kwargs.get('level_max')
        self.dice = kwargs.get('dice', Dice())
        self.back = kwargs.get('back')
        self.neighbors = kwargs.get('neighbors', [])

    def addNeighbors(self, neighbors):
        for n in neighbors:
            self.neighbors.append(n)

    def battle(self):
        # generate monster
        m = MGENERATOR.generate("{} monster".format(self.name), (random.random() % self.level_max) + self.level_min, Dice())
        
        REF.vsPlayer(PLAYER, m)

        self.enter()

    def enter(self):
        # random encounter

        # TODO: implement random encounter
#        # (player.level - area.max_level) / max dice = chance of encounter
#        enc_chance = (self.level_max - player.getMaxLevel() ) / self.dice.getSize();
#        if enc_chance < 0: enc_chance = 0
#        if (self.dice.percent() >= 

        options = []

        options.append(Option(label="Battle!", key='b', callback=self.battle))

        for n in self.neighbors:
            options.append(Option(label="Travel to {}".format(n.name), key=n.name[0].lower(), callback=n.enter))

        options.append(Option(label="Back", key='t', callback=self.back))
        
        p = Prompt(label="You have entered {}".format(self.name), options=options)

        p.prompt()

class Player(object):
    def __init__(self, **kwargs):
        self.name = kwargs.get('name', 'Ashthorp')
        self.monsters = [ MGENERATOR.generate(name='Pykachu', level=1, dice=Dice() ) ]
        self.area = None

    def getMaxLevel(self):
        max = 0

        for m in self.monsters:
            if m.level > max:
                max = m.level

        return max


class Option(object):
    def __init__(self, **kwargs):
        self.label = kwargs.get('label')
        self.key = kwargs.get('key')
        self.callback = kwargs.get('callback')

    def __str__(self):
        return "[{}] {}".format(self.key, self.label)

    
class Prompt(object):
    def __init__(self, **kwargs):
        self.label = kwargs.get('label')
        self.options = kwargs.get('options', [])

    def __str__(self):
        msg = "{}\n\n".format(self.label)
        
        for opt in self.options:
            msg += "{}\n".format(opt)

        msg += "\nchoice: "

        return msg

    def prompt(self):
        correct = False

        while True:
            key = raw_input(self)

            for opt in self.options:
                if key == opt.key:
                    correct = True
                    opt.callback()
                    break

            if not correct:
                print "invalid option '{}'.  Try again.\n".format(key)


# callbacks
# 
# This section is used for linking together the prompts/menus, options and to what functions
# should be triggered.  This is where we tie the system together.
#

# new game callback
def callback_newgame():
    options = []

    for area in AREAS:
        options.append(Option(label="{}".format(area.name), key=area.name[0].lower(), callback=area.enter))

    options.append(Option(label='Back', key='t', callback=callback_title))

    p = Prompt(label='Choose a starting area:', options=options)

    p.prompt()
        

# quit game callback
def callback_quitgame():
    # TODO: save?
    
    print "Goodbye."

    sys.exit(0)
    
def callback_title():
    # main menu options
    opts_main_menu = [
            Option(label="New Game", key='n', callback=callback_newgame),
            Option(label="Quit", key='q', callback=callback_quitgame)
    ]

    mainMenu = Prompt(label="Main Menu", options=opts_main_menu)

    mainMenu.prompt()

def area_generator():
    # create 3 areas

    # TODO: consider making area generation into a config file.
    # in the mean time, continue forward as this is a proof-of-concept

    areas = [
        Area(name='Green Hills', level_min=1, level_max=5, back=callback_title),
        Area(name='Aerie Peak', level_min=6, level_max=10, back=callback_title),
        Area(name='Death Canyon', level_min=11, level_max=15, back=callback_title)
    ]

    areas[0].addNeighbors([ areas[1], areas[2] ])
    areas[1].addNeighbors([ areas[0], areas[2] ])
    areas[2].addNeighbors([ areas[0], areas[1] ])

    return areas

def main():
    # start
    callback_title()


# constants assignments
AREAS = area_generator()
MGENERATOR = MonsterGenerator()
REF = Referee(Dice() )
PLAYER = Player()

if __name__ == "__main__":
    main()
    

