#!/usr/bin/env python

import random
import sys

"""
Dice is a dice object
"""
class Dice(object):
    def __init__(self, size=6):
        self.size = size

    def roll(self):
        return int(self.size * random.random())

    def getSize(self):
        return self.size

    def percent(self):
        return (self.size * random.random()) / self.size

"""
Monster is the base class of a "monster"
"""
class Monster(object):
    def __init__(self, **kwargs):
        self.name = getattr(kwargs, 'name')
        self.max_health = getattr(kwargs, 'max_health')
        self.health = self.max_health
        self.exp = getattr(kwargs, 'exp')
        self.attack = getattr(kwargs, 'attack')
        self.defense = getattr(kwargs, 'defense')
        self.speed = getattr(kwargs, 'speed')
        self.luck = getattr(kwargs, 'luck')
        self.level = getattr(kwargs, 'level')

"""
MonsterGenerator is a factory-type pattern object that generates monsters with
random attributes based on level
"""
class MonsterGenerator(object):
    def generate(self, name, level, dice):
        return Monster( name=name,
                        max_health=level + (level * dice.percent()),
                        attack=level + (level * dice.percent()),
                        defense=level + (level * dice.percent()),
                        speed=level + (level * dice.percent()),
                        luck=level + (level * dice.percent()),
                        level=level) 

"""
Referee is the entity that is responsible 
"""
class Referee(object):
    def __init__(self, dice):
        self.dice = dice

    def attack(self, m1, m2):
        damage = m1.attack * int(self.dice.percent() + 1) 

        # attacker roll for crit
        if self.dice.roll() >= self.dice.getSize():
            damage = m1.attack * 2

        # dodge chance
        if self.dice.roll() >= self.dice.getSize():
            print "{} dodged {} 's attack!".format(m2.name, m1.name )

        else:
            m2.health -= damage - m2.defense
            print "{} dealt {} {} damage".format(m1.name, m2.name, damage)

        if m2.health <= 0:
            print "{} has collapsed.".format(m2.name)
            return True

        return False

    def run(self, m1, m2):
        while True:
            if self.attack(m1, m2):
                print "{} wins the match!".format(m1.name)
                break

            elif self.attack(m2, m1):
                print "{} wins the match!".format(m2.name)
                break
            
    
class Area(object):
    def __init__(self, **kwargs):
        self.names = kwargs.get('name', 'The Random Zone')
        self.level_range = kwarags.get('level_range', range(1,100))

class Player(object):
    def __init__(self, **kwargs):
        self.name = kwargs.get('name', 'Ashthorp')
        self.monsters = []
        self.area = None

    def enterArea(self, area):
        self.area = area






class Option(object):
    def __init__(self, **kwargs):
        self.label = kwargs.get('label')
        self.key = kwargs.get('key')
        self.callback = kwargs.get('callback')

    def __str__(self):
        return "[{}] {}".format(self.key, self.label)

    
class Prompt(object):
    def __init__(self, **kwargs):
        self.label = kwargs.get('label')
        self.options = kwargs.get('options', [])

    def __str__(self):
        msg = "{}\n\n".format(self.label)
        
        for opt in self.options:
            msg += "{}\n".format(opt)

        msg += "choice: "

        return msg

    def prompt(self):
        correct = False

        while True:
            key = raw_input(self)

            for opt in self.options:
                if key == opt.key:
                    correct = True
                    opt.callback()
                    break

            if not correct:
                print "invalid option '{}'.  Try again.\n".format(key)

# new game callback
def callback_newgame():
    callback_quitgame()

# quit game callback
def callback_quitgame():
    sys.exit(0)
    

def main():

    
    # options

    # main menu options
    opts_main_menu = [
            Option(label="New Game", key='n', callback=callback_newgame),
            Option(label="Quit", key='q', callback=callback_quitgame)
    ]

    mainMenu = Prompt(label="Main Menu", options=opts_main_menu)

    ref = Referee(Dice())

    # start
    mainMenu.prompt()

if __name__ == "__main__":
    main()
    
